{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MCCE website \u00b6 MCCE (Multi-Conformation Continuum Electrostatics) is a biophysics simulation program combining continuum electrostatics and molecular mechanics. In this program, the protein side chain motions are simulated explicitly while the dielectric effect of solvent and bulk protein material is modeled by continuum electrostatics. What can MCCE do? \u00b6 MCCE can calculate: residue pka, cofactor Em and protein PI in protein-solvent systems; protein structural responses to changes in charge; residue ionization changes in response to protein structural changes; location and stoichiometry of proton transfers coupled to electron transfer Project at a Glance: \u00b6 MCCE is a program developed at Marilyn Gunner's lab in City College of New York. Current development focuses are on the following aspects: change residue/cofactor topology file into free format to make the procedure of integrating a new ligand easier. make program friendly to distribute and easy to maintain. develop tool sets to analyze MCCE results. develop protein pKa database to include all known structures listed in the PDB.","title":"Overview"},{"location":"#welcome-to-mcce-website","text":"MCCE (Multi-Conformation Continuum Electrostatics) is a biophysics simulation program combining continuum electrostatics and molecular mechanics. In this program, the protein side chain motions are simulated explicitly while the dielectric effect of solvent and bulk protein material is modeled by continuum electrostatics.","title":"Welcome to MCCE website"},{"location":"#what-can-mcce-do","text":"MCCE can calculate: residue pka, cofactor Em and protein PI in protein-solvent systems; protein structural responses to changes in charge; residue ionization changes in response to protein structural changes; location and stoichiometry of proton transfers coupled to electron transfer","title":"What can MCCE do?"},{"location":"#project-at-a-glance","text":"MCCE is a program developed at Marilyn Gunner's lab in City College of New York. Current development focuses are on the following aspects: change residue/cofactor topology file into free format to make the procedure of integrating a new ligand easier. make program friendly to distribute and easy to maintain. develop tool sets to analyze MCCE results. develop protein pKa database to include all known structures listed in the PDB.","title":"Project at a Glance:"},{"location":"developers/flow/","text":"Python MCCE \u00b6 A Python version of Multi-Conformation Continuum Electrostatics simulation program to model protein electrostatic interactions. Program Mechanism \u00b6 A protein or protein complex structure is broken down into pieces, usually amino acid residues and cofactors. Each piece may have charge, protonation, and position conformers. These peices interact with each other, and the piece conformers are sampled by Monte Carlo sampling to find their probabilty of occupancy at various conditions, such as pH, redox potention, chemical potential, and introduced charges. Program Structure \u00b6 Step 1: Break structue into residues \u00b6 graph TD A1 ( run . prm ) --> B1 (( read prm )) A2 ( input . pdb ) --> C1 (( read pdb )) A3 ( tpl files ) --> B4 (( read tpl )) subgraph Step 0 : Load run control and tpl files B1 --> B2 [ run_prm db ] B1 --> B4 B4 --> B5 [ tpl db ] end B2 --> C1 B5 --> C1 subgraph Step 1 : Break into residues C1 --> C2 (( verify pdb )) C2 --> C3 (( to residues )) C3 --> C4 (( missing atoms )) C4 --> C5 (( ligand bonds )) C5 --> C6 (( NTR , CTR )) end C6 --> C7 ( step1_out . pdb ) C6 --> C8 ( head1 . lst ) Step 2: Make residue conformers \u00b6 graph TD A1 ( run . prm ) --> B1 (( read prm )) A3 ( tpl files ) --> B4 (( read tpl )) subgraph Step 0 : Load run control and tpl files B1 --> B2 [ run_prm db ] B1 --> B4 B4 --> B5 [ tpl db ] end B2 --> C1 B5 --> C1 B6 ( step1_out . pdb ) --> C1 B7 ( head1 . lst ) --> C1 (( readin )) subgraph Step 2 : Make residue conformers C1 --> C2 (( charge < br /> conformers )) C2 --> C3 (( position < br /> conformers )) C3 --> C4 (( hbond < br /> conformers )) end C4 --> C5 ( step2_out . pdb ) C4 --> C6 ( head2 . lst ) Step 3. Compute energy table \u00b6 graph TD A1 ( run . prm ) --> B1 (( read prm )) A3 ( tpl files ) --> B4 (( read tpl )) subgraph Step 0 : Load run control and tpl files B1 --> B2 [ run_prm db ] B1 --> B4 B4 --> B5 [ tpl db ] end B2 --> C1 B6 ( step2_out . pdb ) --> C1 (( readin )) subgraph Step 3 : Make residue conformers C1 --> C2 (( RXN delphi )) C2 --> C3 (( PW delphi )) C3 --> C4 (( boundary < br /> correction )) end C4 --> C5 ( energies /*.opp) C4-->C6(head3.lst) Step 4. Monte Carlo sampling: accessible states \u00b6 graph TB A1 ( energies /*.opp) --> B1 ( readin ) A2 ( head3 . lst ) --> B1 A3 ( run . prm ) --> A4 (( read prm )) A4 --> A5 [ prm db ] A5 --> B1 B1 --> B2 (( group into residues )) B2 --> B3 (( verify flags )) B3 --> B4 (( big list )) B4 --> B5 (( loop over pH )) B5 --> B6 (( independent < br \\ > runs )) B6 --> B7 (( Monte Carlo sampling )) B7 --> B7 .1 (( record state )) B7 .1 --> B8 { over ? } B8 -- no --> B6 B8 -- yes --> B9 { next pH ? } B9 -- no --> B5 B9 -- yes --> B10 (( end ))","title":"Python MCCE"},{"location":"developers/flow/#python-mcce","text":"A Python version of Multi-Conformation Continuum Electrostatics simulation program to model protein electrostatic interactions.","title":"Python MCCE"},{"location":"developers/flow/#program-mechanism","text":"A protein or protein complex structure is broken down into pieces, usually amino acid residues and cofactors. Each piece may have charge, protonation, and position conformers. These peices interact with each other, and the piece conformers are sampled by Monte Carlo sampling to find their probabilty of occupancy at various conditions, such as pH, redox potention, chemical potential, and introduced charges.","title":"Program Mechanism"},{"location":"developers/flow/#program-structure","text":"","title":"Program Structure"},{"location":"developers/flow/#step-1-break-structue-into-residues","text":"graph TD A1 ( run . prm ) --> B1 (( read prm )) A2 ( input . pdb ) --> C1 (( read pdb )) A3 ( tpl files ) --> B4 (( read tpl )) subgraph Step 0 : Load run control and tpl files B1 --> B2 [ run_prm db ] B1 --> B4 B4 --> B5 [ tpl db ] end B2 --> C1 B5 --> C1 subgraph Step 1 : Break into residues C1 --> C2 (( verify pdb )) C2 --> C3 (( to residues )) C3 --> C4 (( missing atoms )) C4 --> C5 (( ligand bonds )) C5 --> C6 (( NTR , CTR )) end C6 --> C7 ( step1_out . pdb ) C6 --> C8 ( head1 . lst )","title":"Step 1: Break structue into residues"},{"location":"developers/flow/#step-2-make-residue-conformers","text":"graph TD A1 ( run . prm ) --> B1 (( read prm )) A3 ( tpl files ) --> B4 (( read tpl )) subgraph Step 0 : Load run control and tpl files B1 --> B2 [ run_prm db ] B1 --> B4 B4 --> B5 [ tpl db ] end B2 --> C1 B5 --> C1 B6 ( step1_out . pdb ) --> C1 B7 ( head1 . lst ) --> C1 (( readin )) subgraph Step 2 : Make residue conformers C1 --> C2 (( charge < br /> conformers )) C2 --> C3 (( position < br /> conformers )) C3 --> C4 (( hbond < br /> conformers )) end C4 --> C5 ( step2_out . pdb ) C4 --> C6 ( head2 . lst )","title":"Step 2: Make residue conformers"},{"location":"developers/flow/#step-3-compute-energy-table","text":"graph TD A1 ( run . prm ) --> B1 (( read prm )) A3 ( tpl files ) --> B4 (( read tpl )) subgraph Step 0 : Load run control and tpl files B1 --> B2 [ run_prm db ] B1 --> B4 B4 --> B5 [ tpl db ] end B2 --> C1 B6 ( step2_out . pdb ) --> C1 (( readin )) subgraph Step 3 : Make residue conformers C1 --> C2 (( RXN delphi )) C2 --> C3 (( PW delphi )) C3 --> C4 (( boundary < br /> correction )) end C4 --> C5 ( energies /*.opp) C4-->C6(head3.lst)","title":"Step 3. Compute energy table"},{"location":"developers/flow/#step-4-monte-carlo-sampling-accessible-states","text":"graph TB A1 ( energies /*.opp) --> B1 ( readin ) A2 ( head3 . lst ) --> B1 A3 ( run . prm ) --> A4 (( read prm )) A4 --> A5 [ prm db ] A5 --> B1 B1 --> B2 (( group into residues )) B2 --> B3 (( verify flags )) B3 --> B4 (( big list )) B4 --> B5 (( loop over pH )) B5 --> B6 (( independent < br \\ > runs )) B6 --> B7 (( Monte Carlo sampling )) B7 --> B7 .1 (( record state )) B7 .1 --> B8 { over ? } B8 -- no --> B6 B8 -- yes --> B9 { next pH ? } B9 -- no --> B5 B9 -- yes --> B10 (( end ))","title":"Step 4. Monte Carlo sampling: accessible states"},{"location":"developers/mkdocs/","text":"How to write documentation \u00b6 This documentation is written in mkdocs, which uses markdown language and publishes on github pages . Installation of Mkdocs \u00b6 #!/usr/bin/env bash pip install --upgrade pip pip install bs4 pip install unicode pip install mkdocs pip install mkdocs-material pip install pymdown-extensions pip install markdown-blockdiag pip install markdown-include This will install mkdocs, theme, and necessary plugins for documentation of this project. Writing and editing documentation \u00b6 All documentation files reside under folder wiki/ mkdocs.yml : configuration file, also defines the menu docs/users/ : location of documentation files for users docs/developers/ : location of documentation files for developers site/ : site web pages published by command mkdocs gh-deploy Under wiki/ directory, run mkdocs serve will bring up a web service, and point browser to http://localhost:8000 to enable viewing and debugging the documentation. Deploy the site \u00b6 To deploy site, you can create a pull request so that the GunnerLab repo administrator can merge and deploy for you. or deploy directly by running gh-deply under directory wiki/. You need GunnerLab repo member permission to do this. Markdown languange references \u00b6","title":"Writing Documentation"},{"location":"developers/mkdocs/#how-to-write-documentation","text":"This documentation is written in mkdocs, which uses markdown language and publishes on github pages .","title":"How to write documentation"},{"location":"developers/mkdocs/#installation-of-mkdocs","text":"#!/usr/bin/env bash pip install --upgrade pip pip install bs4 pip install unicode pip install mkdocs pip install mkdocs-material pip install pymdown-extensions pip install markdown-blockdiag pip install markdown-include This will install mkdocs, theme, and necessary plugins for documentation of this project.","title":"Installation of Mkdocs"},{"location":"developers/mkdocs/#writing-and-editing-documentation","text":"All documentation files reside under folder wiki/ mkdocs.yml : configuration file, also defines the menu docs/users/ : location of documentation files for users docs/developers/ : location of documentation files for developers site/ : site web pages published by command mkdocs gh-deploy Under wiki/ directory, run mkdocs serve will bring up a web service, and point browser to http://localhost:8000 to enable viewing and debugging the documentation.","title":"Writing and editing documentation"},{"location":"developers/mkdocs/#deploy-the-site","text":"To deploy site, you can create a pull request so that the GunnerLab repo administrator can merge and deploy for you. or deploy directly by running gh-deply under directory wiki/. You need GunnerLab repo member permission to do this.","title":"Deploy the site"},{"location":"developers/mkdocs/#markdown-languange-references","text":"","title":"Markdown languange references"},{"location":"developers/notes/","text":"Suggestions to developers \u00b6 Tip Use Python 3 Read PEP 8 (https://www.python.org/dev/peps/pep-0008/) Read PEP 20 (https://www.python.org/dev/peps/pep-0020/) Put constants, data structure and reusable functions in pymccelib.py so that the main program keeps focus on program flow. Put all python scripts in bin/ Put all program documentation in markdown language in /wiki/docs/ Print and log messages \u00b6 Use print() to print program result and logging module to print messages, allowing users to set verbose mode and level, and module functions to run at quiet mode. logging levels and sample usage \u00b6 Task What to use Display program output print() Debug information logging.debug() Confirmation that things are working as expected logging.info() Warning but program is still running logging.warning() Unexpected error that may cause program to stop or produce wrong result logging.error() Serious error that will break the program logging.critical() Example of using logging in a program \u00b6 #!/usr/bin/env python import logging def welcome (): logging . info ( \"Welcome from function!\" ) return if __name__ == \"__main__\" : # Set logging level. DEBUG, INFO, WARNING, ERROR and CRITICAL are in the order from more details to less logging . basicConfig ( level = logging . DEBUG , format = ' %(message)s ' ) logging . info ( \"Welcome from main program!\" ) welcome () Attention The logging.basicConfig() can only be declared only once, and before any logging messages! Python tutorials and books \u00b6 Beginner books \u00b6 Python Crash Course by Eric Matthes, 2nd Edition. Find on Amazon . Comprehensive reference \u00b6 Programming Python by Mark Lutz, 4th Edition. Find it on Amazon . Advanced books \u00b6 Python Cookbook by David Beazley and Brian Jones, Third edition. Find it on Amazon .","title":"Notes to Developers"},{"location":"developers/notes/#suggestions-to-developers","text":"Tip Use Python 3 Read PEP 8 (https://www.python.org/dev/peps/pep-0008/) Read PEP 20 (https://www.python.org/dev/peps/pep-0020/) Put constants, data structure and reusable functions in pymccelib.py so that the main program keeps focus on program flow. Put all python scripts in bin/ Put all program documentation in markdown language in /wiki/docs/","title":"Suggestions to developers"},{"location":"developers/notes/#print-and-log-messages","text":"Use print() to print program result and logging module to print messages, allowing users to set verbose mode and level, and module functions to run at quiet mode.","title":"Print and log messages"},{"location":"developers/notes/#logging-levels-and-sample-usage","text":"Task What to use Display program output print() Debug information logging.debug() Confirmation that things are working as expected logging.info() Warning but program is still running logging.warning() Unexpected error that may cause program to stop or produce wrong result logging.error() Serious error that will break the program logging.critical()","title":"logging levels and sample usage"},{"location":"developers/notes/#example-of-using-logging-in-a-program","text":"#!/usr/bin/env python import logging def welcome (): logging . info ( \"Welcome from function!\" ) return if __name__ == \"__main__\" : # Set logging level. DEBUG, INFO, WARNING, ERROR and CRITICAL are in the order from more details to less logging . basicConfig ( level = logging . DEBUG , format = ' %(message)s ' ) logging . info ( \"Welcome from main program!\" ) welcome () Attention The logging.basicConfig() can only be declared only once, and before any logging messages!","title":"Example of using logging in a program"},{"location":"developers/notes/#python-tutorials-and-books","text":"","title":"Python tutorials and books"},{"location":"developers/notes/#beginner-books","text":"Python Crash Course by Eric Matthes, 2nd Edition. Find on Amazon .","title":"Beginner books"},{"location":"developers/notes/#comprehensive-reference","text":"Programming Python by Mark Lutz, 4th Edition. Find it on Amazon .","title":"Comprehensive reference"},{"location":"developers/notes/#advanced-books","text":"Python Cookbook by David Beazley and Brian Jones, Third edition. Find it on Amazon .","title":"Advanced books"},{"location":"developers/sharecode_git/","text":"Collaborate through GIT \u00b6 Tip: Git/github Cheat Sheet If you need a quick reference of setting up and using git/github, find git cheat sheet here . Sample workflow \u00b6 To collaborate with others on this project, please fork from the GunnerLab Develop-MCCE repository . The detailed steps are illustrated in the following example: Create an issue on group repo \u00b6 Tell others what you are working on by creating an issue. To create an issue, go to https://github.com/GunnerLab/Develop-MCCE , and create a new issue. After an issue is created, a number will be returned. Create a branch on local repo \u00b6 Suppose I am going to write code to address the issue created by someone else or myself, and the issue number is #30. The issue title is \"Develop script to install Mkdocs and recommended plugins\" Now I go to the forked repo directory on my local computer, make sure I have remote referenc set up correctly: ( base ) jmao@vivo:~/projects/Develop-MCCE$ git remote -v origin https://github.com/newbooks/Develop-MCCE.git ( fetch ) origin https://github.com/newbooks/Develop-MCCE.git ( push ) upstream https://github.com/GunnerLab/Develop-MCCE.git ( fetch ) upstream https://github.com/GunnerLab/Develop-MCCE.git ( push ) Before I create a branch, update the master from upstream so all existing code is up to date. ( base ) jmao@vivo:~/projects/Develop-MCCE$ git checkout master Already on 'master' Your branch is ahead of 'origin/master' by 7 commits. ( use \"git push\" to publish your local commits ) ( base ) jmao@vivo:~/projects/Develop-MCCE$ git pull upstream master From https://github.com/GunnerLab/Develop-MCCE * branch master -> FETCH_HEAD Already up to date. It's time to create a new local branch that matches the issue number: ( base ) jmao@vivo:~/projects/Develop-MCCE$ git checkout -b issue#30 Develop code under branch \u00b6 In this example, I create a file install_mkdocs.sh under bin. #!/bin/bash pip install --upgrade pip pip install bs4 pip install unicode pip install mkdocs pip install mkdocs-material pip install pymdown-extensions pip install markdown-blockdiag pip install markdown-include Go to wiki directory and run mkdocs serve Then point browser to URL http://localhost:8000 to monitor mkdocs page. If everything goes well, the documentation site should be up. Any edits under wiki will be reflected by the above page. When it is ready to deploy as a github page, run mkdocs gh-deploy This will create another branch, which is a special branch linked to Github page, and pushed to Github automatically. So in this example, I actually end up with two branches: issue#30 gh-pages (already pushed to Github by mkdocs gh-deploy ) We only need to manually commit and push branch issue#30 git add bin/ git commit -a -m \"Added script to install mkdocs. closes #30\" git push --set-upstream origin issue#30 \"closes #30\" in commit will tell Github to close the issue #30 at the time of merging to the upstream. Create pull request \u00b6 After the changes are pushed to origin, go to your forked repository. Tips The most recently pushed branch should appear separately, and a button to create pull request next to it. This is a shortcut to make pull request. Under tab <> Code, change the branch to issue#30, then use the button on the right to make a new pull quest. The GunnerLab repo manager will review and approve your pull request. Clean up \u00b6 Once the pull request is approved, the changes are compiled into the master branch of the main repository, and the branch issue#30 in your fork and local repository can be deleted. Under your local repo, git checkout master # switch from branch to master git pull upstream master # sync from upstream git branch delete issue#30 # delete the local issue branch git push origin --delete issue#30 # delete remote issue branch Now both the local and upstream repo have the up to date code. Tips Coding should take place only in issue branches. Master branch should be used only to sync from the upstream, and serve as a starting point of making your issue branches. This helps to avoid conflicts between upstream and forked repo.","title":"Git Sample Workflow"},{"location":"developers/sharecode_git/#collaborate-through-git","text":"Tip: Git/github Cheat Sheet If you need a quick reference of setting up and using git/github, find git cheat sheet here .","title":"Collaborate through GIT"},{"location":"developers/sharecode_git/#sample-workflow","text":"To collaborate with others on this project, please fork from the GunnerLab Develop-MCCE repository . The detailed steps are illustrated in the following example:","title":"Sample workflow"},{"location":"developers/sharecode_git/#create-an-issue-on-group-repo","text":"Tell others what you are working on by creating an issue. To create an issue, go to https://github.com/GunnerLab/Develop-MCCE , and create a new issue. After an issue is created, a number will be returned.","title":"Create an issue on group repo"},{"location":"developers/sharecode_git/#create-a-branch-on-local-repo","text":"Suppose I am going to write code to address the issue created by someone else or myself, and the issue number is #30. The issue title is \"Develop script to install Mkdocs and recommended plugins\" Now I go to the forked repo directory on my local computer, make sure I have remote referenc set up correctly: ( base ) jmao@vivo:~/projects/Develop-MCCE$ git remote -v origin https://github.com/newbooks/Develop-MCCE.git ( fetch ) origin https://github.com/newbooks/Develop-MCCE.git ( push ) upstream https://github.com/GunnerLab/Develop-MCCE.git ( fetch ) upstream https://github.com/GunnerLab/Develop-MCCE.git ( push ) Before I create a branch, update the master from upstream so all existing code is up to date. ( base ) jmao@vivo:~/projects/Develop-MCCE$ git checkout master Already on 'master' Your branch is ahead of 'origin/master' by 7 commits. ( use \"git push\" to publish your local commits ) ( base ) jmao@vivo:~/projects/Develop-MCCE$ git pull upstream master From https://github.com/GunnerLab/Develop-MCCE * branch master -> FETCH_HEAD Already up to date. It's time to create a new local branch that matches the issue number: ( base ) jmao@vivo:~/projects/Develop-MCCE$ git checkout -b issue#30","title":"Create a branch on local repo"},{"location":"developers/sharecode_git/#develop-code-under-branch","text":"In this example, I create a file install_mkdocs.sh under bin. #!/bin/bash pip install --upgrade pip pip install bs4 pip install unicode pip install mkdocs pip install mkdocs-material pip install pymdown-extensions pip install markdown-blockdiag pip install markdown-include Go to wiki directory and run mkdocs serve Then point browser to URL http://localhost:8000 to monitor mkdocs page. If everything goes well, the documentation site should be up. Any edits under wiki will be reflected by the above page. When it is ready to deploy as a github page, run mkdocs gh-deploy This will create another branch, which is a special branch linked to Github page, and pushed to Github automatically. So in this example, I actually end up with two branches: issue#30 gh-pages (already pushed to Github by mkdocs gh-deploy ) We only need to manually commit and push branch issue#30 git add bin/ git commit -a -m \"Added script to install mkdocs. closes #30\" git push --set-upstream origin issue#30 \"closes #30\" in commit will tell Github to close the issue #30 at the time of merging to the upstream.","title":"Develop code under branch"},{"location":"developers/sharecode_git/#create-pull-request","text":"After the changes are pushed to origin, go to your forked repository. Tips The most recently pushed branch should appear separately, and a button to create pull request next to it. This is a shortcut to make pull request. Under tab <> Code, change the branch to issue#30, then use the button on the right to make a new pull quest. The GunnerLab repo manager will review and approve your pull request.","title":"Create pull request"},{"location":"developers/sharecode_git/#clean-up","text":"Once the pull request is approved, the changes are compiled into the master branch of the main repository, and the branch issue#30 in your fork and local repository can be deleted. Under your local repo, git checkout master # switch from branch to master git pull upstream master # sync from upstream git branch delete issue#30 # delete the local issue branch git push origin --delete issue#30 # delete remote issue branch Now both the local and upstream repo have the up to date code. Tips Coding should take place only in issue branches. Master branch should be used only to sync from the upstream, and serve as a starting point of making your issue branches. This helps to avoid conflicts between upstream and forked repo.","title":"Clean up"},{"location":"developers/structure/","text":"Main program: pymcce Four steps: premcce.py: convert to mcce pdb mkconf.py: make conformers mkenergy.py: caculate energy table monte.py: Monte Carlo sampling of states Supporting modules: pymccelib.py: mcce modules geometry.py: geometry operations Analysis tools: fitpka.py: Titration curve fitting mfe.py: use mean field to analyze free energy Documentation site: Use Mkdocs? Installation: material plugin","title":"Program Structure"}]}